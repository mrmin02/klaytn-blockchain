package klaytn;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;

import org.springframework.boot.configurationprocessor.json.JSONObject;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Keys;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.utils.Numeric;
//import org.web3j.rlp.*;

import com.klaytn.caver.Caver;
import com.klaytn.caver.crpyto.KlayCredentials;
import com.klaytn.caver.fee.FeePayerManager;
import com.klaytn.caver.methods.response.KlayTransactionReceipt;
import com.klaytn.caver.tx.ValueTransfer;
import com.klaytn.caver.tx.gas.DefaultGasProvider;
import com.klaytn.caver.tx.manager.TransactionManager;
import com.klaytn.caver.tx.model.SmartContractDeployTransaction;
import com.klaytn.caver.tx.model.SmartContractExecutionTransaction;
import com.klaytn.caver.utils.ChainId;
import com.klaytn.caver.utils.Convert;
import java.util.List;
public class klaytn {
	public void createKey() throws Exception{ // 키 쌍으로 어카운트 생성
		KlayCredentials credentials =        
			    KlayCredentials.create(Keys.createEcKeyPair());
		// 계정 생성
			String privateKey = // 비밀키
			    Numeric.toHexStringWithPrefix(
			        credentials.getEcKeyPair().getPrivateKey());
			
			
			String address = credentials.getAddress(); // 어드레스값
			
			// 생성한 어카운트에는 
			//KlayCredentials credentials = KlayCredentials.create(<private key>); 이걸로 접근
			System.out.println("privateKey: "+privateKey);
			System.out.println("address: "+address);
	}
	
	public void sendKlay() throws Exception {// 클레이 전송
		Caver caver = Caver.build(Caver.BAOBAB_URL);
		
		KlayCredentials credentials = KlayCredentials.create("0xe6dde3422998e00bbd13002e1396388d9b0e4f6ab3de630ce8167ff2c99057f2");
		
		KlayTransactionReceipt.TransactionReceipt transactionReceipt 
	    = ValueTransfer.sendFunds(
	                caver, 
	                credentials, 
	                "0x4222a646e7920fd79352e184f6cee28a5afd2ddb",
	                BigDecimal.valueOf(1), 
	                Convert.Unit.KLAY,  
	                new DefaultGasProvider().getGasLimit()).send();
		
		String txHash = transactionReceipt.getTransactionHash();
		System.out.println("txHash : "+txHash);
	}
	//1)caver, (2)klayCredentials, (3)toAddress, (4)value, (5)unit,(6)gasLimit을 필요로 하며, 리턴값으로는 TransactionReceipt를 반환합니다.
	//(1)caver는 바오밥이나
//	메인넷체인과 연결하는 역할을 하며, 
	//(2)klayCredentials는 보내는 사람의 계정을 의미합니다. 
	//(3)toAddress는 Klay를 받는 사람의 EOA 주소, 
	//(4)value는 보내는 클레이의 값, 
	//(5)unit은 Klay의 단위, 
	//(6)gasLimit은 Klay를 전송할 때 드는 수수료(가스비)의 최대값을 의미합니다.
	
	
	// 스마트 컨트렉트 
	public void disploy() throws Exception{
		Caver caver = Caver.build(Caver.BAOBAB_URL);
		
		KlayCredentials credentials = KlayCredentials.create("0xe6dde3422998e00bbd13002e1396388d9b0e4f6ab3de630ce8167ff2c99057f2");
		
		Test eeToken = Test.deploy(
			caver,
			credentials,
			ChainId.BAOBAB_TESTNET,
			new DefaultGasProvider()).send();
		String deployedContractAddress = eeToken.getContractAddress();
		
		System.out.println("deployedContractAddress : " + deployedContractAddress);
		
		
	}
	public void smart_contract_ex() throws Exception{// 배포된 컨트렉트로 클레이 전송
		Caver caver = Caver.build(Caver.BAOBAB_URL);
		
		KlayCredentials credentials = KlayCredentials.create("0x26efd4a0c62543128ac05b4f3b29668d43c18a43531b5aecb85e387dd1dc0bd0");
		
//		0xcc1b2b7db95514cced8b7dcb169470eeda34ca76    -  대납
		Test eeToken = Test.load(
				"0x41119306f23ecca50a50e0c7f75c01a9645fcb5f",// 콘트렉트 adress 
				caver, 
				credentials, 
				ChainId.BAOBAB_TESTNET,
				new DefaultGasProvider());
		
		KlayTransactionReceipt.TransactionReceipt transactionReceipt = 
				eeToken.transfer(BigInteger.ZERO).send();
		String txHash = transactionReceipt.getTransactionHash();
		System.out.println("After"+eeToken.getBalance());
		
		System.out.println("txHash : " + txHash);
	}
	
	
	// 수수료 대납
	public void test_pee() throws Exception{ // 수수료 스마트 컨트렉트로 클레이 전송 
		Caver caver = Caver.build(Caver.BAOBAB_URL);
		KlayCredentials sender = KlayCredentials.create("0xe6dde3422998e00bbd13002e1396388d9b0e4f6ab3de630ce8167ff2c99057f2");
		
//		Function function = new Function(
//				Test2.FUNC_TRANSFER,  // FUNC_TRANSFER = "transfer"
//		        Arrays.asList(
//		        		new Uint256(BigInteger.ZERO)
//		        		),  // inputParameters
//		        Collections.emptyList()  // outputParameters          
//		);
//		String data = FunctionEncoder.encode(function);
		
//		String str="1212";
//
//		byte[] byteArray=str.getBytes();
//		
//		String strYes = new String(byteArray);
//		System.out.println(strYes);
		
		JSONObject json = new JSONObject();
		json.put("title", "first Vote");
		json.put("vote", "1");
		byte[] sendData = json.toString().getBytes("utf-8");
		
		JSONObject testV=new JSONObject(new String(sendData));
		System.out.println(testV);
		
		TransactionManager txManager = new TransactionManager.Builder(caver, sender)
                .setChaindId(ChainId.BAOBAB_TESTNET).build();
		
		SmartContractExecutionTransaction smartContractExecutionTransaction
			= SmartContractExecutionTransaction.create(
				sender.getAddress(),//만드는 User 의 address
				"0xbbbb511bd256fa8b7bc8235841ca1d7e162816fa",// 대납 콘트렉트 주소                                      
		        BigInteger.ZERO,
//		        Numeric.hexStringToByteArray(data),       
		        sendData, //전송할 데이터
//		        new DefaultGasProvider().getGasLimit(Test.FUNC_TRANSFER)
		        BigInteger.valueOf(100_000)
		);
		System.out.println("smartContractExecutionTransaction:" +smartContractExecutionTransaction);
		String rawTransaction
		        = txManager.sign(smartContractExecutionTransaction, true).getValueAsString();
		
		KlayCredentials feePayer = KlayCredentials.create("0x26efd4a0c62543128ac05b4f3b29668d43c18a43531b5aecb85e387dd1dc0bd0");// 수수료 부담하는 사람의 private key
		FeePayerManager feePayerManager
		        = new FeePayerManager.Builder(caver, feePayer)
		        		.build();
//		                .setChainId(ChainId.BAOBAB_TESTNET).build();
		//Sync : FeePayer ExecuteTx
		KlayTransactionReceipt.TransactionReceipt transactionReceipt 
			= feePayerManager.executeTransaction(rawTransaction);
		String errorMessage = transactionReceipt.getErrorMessage();
		String txHash = transactionReceipt.getTransactionHash();
		
		System.out.println("txHash: "+txHash);
		System.out.println("errorMessage : "+ errorMessage);
	}
	
	// 수수료 대납 
	
	
	// 수수료 대납 컨트랙트 배포
	public void test_pee_deploy() throws Exception{ // 수수료 대납 컨트렉트 배포
		
		String sendUser = "0x26efd4a0c62543128ac05b4f3b29668d43c18a43531b5aecb85e387dd1dc0bd0"; 

		String feeUser = "0xe6dde3422998e00bbd13002e1396388d9b0e4f6ab3de630ce8167ff2c99057f2"; 
		// 수수료 부담하는 사람  Private Key
		
//		String data = "60806040526000805534801561001457600080fd5b5060e8806100236000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806306661abd14604157806342cbb15c14605d578063d14e62b8146079575b600080fd5b604760a4565b6040518082815260200191505060405180910390f35b606360aa565b6040518082815260200191505060405180910390f35b60a260048036036020811015608d57600080fd5b810190808035906020019092919050505060b2565b005b60005481565b600043905090565b806000819055505056fea165627a7a7230582087453d981a85f80c5262508e1fe5abe94dc38b1167c49b6e3477b74293e9e7000029";
		String data = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610251806100606000396000f3fe60806040526004361061003f5760003560e01c806312065fe01461004157806312514bba1461006c5780638da5cb5b146100bf578063d0e30db014610116575b005b34801561004d57600080fd5b50610056610120565b6040518082815260200191505060405180910390f35b34801561007857600080fd5b506100a56004803603602081101561008f57600080fd5b810190808035906020019092919050505061013f565b604051808215151515815260200191505060405180910390f35b3480156100cb57600080fd5b506100d46101a5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61011e6101ca565b005b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b60008161014a610120565b101561015557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561019b573d6000803e3d6000fd5b5060019050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022357600080fd5b56fea165627a7a72305820987acd37fa17a8ec44d7f750065fa6b1810da4a9ebbef8fd8e3640656468b7690029";
//		String data= "";

		
		// caver & 계정 로드
		Caver caver = Caver.build(Caver.BAOBAB_URL);
		KlayCredentials sender = KlayCredentials.create(sendUser);
		
		// SmartContracdeployTransaction 생성
		SmartContractDeployTransaction smartContractDeployTransaction = SmartContractDeployTransaction.create(
				sender.getAddress(), // 컨트렉트를 배포하고자 하는 계정의 주소
				BigInteger.ZERO, 
				Numeric.hexStringToByteArray(data), 
				new DefaultGasProvider().getGasLimit(), 
				BigInteger.ZERO);
		
		// sender의 계정으로 TransactionManager 인스턴스 생성
		TransactionManager txManager
			= new TransactionManager
				.Builder(caver, sender)
				.setChaindId(ChainId.BAOBAB_TESTNET).build();
		
		String senderRawTransaction
			= txManager.sign(smartContractDeployTransaction, true).getValueAsString();
		
		KlayCredentials feePayer = KlayCredentials.create(feeUser);
		
		FeePayerManager feePayerManager
			= new FeePayerManager.Builder(caver,  feePayer)
				.setChainId(ChainId.BAOBAB_TESTNET).build();
		KlayTransactionReceipt.TransactionReceipt transactionReceipt 
			= feePayerManager.executeTransaction(senderRawTransaction);
		
		String txHash = transactionReceipt.getTransactionHash(); 
		String deployedContractAddress = transactionReceipt.getContractAddress();
		String errorMessage = transactionReceipt.getErrorMessage();
		
		System.out.println("txHash : "+txHash);
		System.out.println("deployedContractAddress : " + deployedContractAddress);
		System.out.println("errorMessage : " + errorMessage);
		
	}
	
	
	// 수수료 대납 컨트랙트 배포  솔리디티 (int  getter setter ) 
		public void test_pee_deploy2() throws Exception{ // 테스트 solidity 저장

			
			String sendUser = "0x26efd4a0c62543128ac05b4f3b29668d43c18a43531b5aecb85e387dd1dc0bd0"; 

			String feeUser = "0xe6dde3422998e00bbd13002e1396388d9b0e4f6ab3de630ce8167ff2c99057f2"; 
			// 수수료 부담하는 사람  Private Key
			
//			String data = "60806040526000805534801561001457600080fd5b5060e8806100236000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806306661abd14604157806342cbb15c14605d578063d14e62b8146079575b600080fd5b604760a4565b6040518082815260200191505060405180910390f35b606360aa565b6040518082815260200191505060405180910390f35b60a260048036036020811015608d57600080fd5b810190808035906020019092919050505060b2565b005b60005481565b600043905090565b806000819055505056fea165627a7a7230582087453d981a85f80c5262508e1fe5abe94dc38b1167c49b6e3477b74293e9e7000029";
//			String data = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060028190555061046f806100686000396000f3fe6080604052600436106100705760003560e01c80638da5cb5b1161004e5780638da5cb5b1461015c578063a87d942c146101b3578063d0e30db0146101de578063de7a5251146101e857610070565b806312065fe01461007257806312514bba1461009d5780633bc5de30146100f0575b005b34801561007e57600080fd5b50610087610245565b6040518082815260200191505060405180910390f35b3480156100a957600080fd5b506100d6600480360360208110156100c057600080fd5b8101908080359060200190929190505050610264565b604051808215151515815260200191505060405180910390f35b3480156100fc57600080fd5b506101056102ca565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561014857808201518184015260208101905061012d565b505050509050019250505060405180910390f35b34801561016857600080fd5b50610171610322565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101bf57600080fd5b506101c8610347565b6040518082815260200191505060405180910390f35b6101e6610351565b005b3480156101f457600080fd5b5061022b6004803603604081101561020b57600080fd5b8101908080359060200190929190803590602001909291905050506103ac565b604051808215151515815260200191505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b60008161026f610245565b101561027a57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156102c0573d6000803e3d6000fd5b5060019050919050565b6060600180548060200260200160405190810160405280929190818152602001828054801561031857602002820191906000526020600020905b815481526020019060010190808311610304575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600254905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103aa57600080fd5b565b6000826103b7610245565b10156103c257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610408573d6000803e3d6000fd5b508160016002548154811061041957fe5b9060005260206000200181905550600260008154809291906001019190505550600190509291505056fea165627a7a723058203caf7a72bc5218f5931193023c221737d0bbb94008c3db2b2884c500d8bf5fc90029";
			
//			String data = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001819055506108b3806100686000396000f3fe6080604052600436106100705760003560e01c80633bc5de301161004e5780633bc5de30146101175780638da5cb5b14610142578063a87d942c1461016d578063d0e30db01461019857610070565b806312065fe01461007257806312514bba1461009d57806320a9d963146100da575b005b34801561007e57600080fd5b506100876101a2565b604051610094919061070e565b60405180910390f35b3480156100a957600080fd5b506100c460048036036100bf919081019061054e565b6101c1565b6040516100d191906106f3565b60405180910390f35b3480156100e657600080fd5b5061010160048036036100fc9190810190610577565b610227565b60405161010e91906106f3565b60405180910390f35b34801561012357600080fd5b5061012c6102ce565b60405161013991906106d1565b60405180910390f35b34801561014e57600080fd5b506101576103b7565b60405161016491906106b6565b60405180910390f35b34801561017957600080fd5b506101826103dc565b60405161018f919061070e565b60405180910390f35b6101a06103e6565b005b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000816101cc6101a2565b10156101d757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561021d573d6000803e3d6000fd5b5060019050919050565b6000826102326101a2565b101561023d57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610283573d6000803e3d6000fd5b508160026001548154811061029457fe5b9060005260206000200190805190602001906102b1929190610441565b506001600081548092919060010191905055506001905092915050565b60606002805480602002602001604051908101604052809291908181526020016000905b828210156103ae578382906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b5050505050815260200190600101906102f2565b50505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600154905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043f57600080fd5b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061048257805160ff19168380011785556104b0565b828001600101855582156104b0579182015b828111156104af578251825591602001919060010190610494565b5b5090506104bd91906104c1565b5090565b6104e391905b808211156104df5760008160009055506001016104c7565b5090565b90565b600082601f8301126104f757600080fd5b813561050a61050582610756565b610729565b9150808252602083016020830185838301111561052657600080fd5b610531838284610826565b50505092915050565b6000610546823561081c565b905092915050565b60006020828403121561056057600080fd5b600061056e8482850161053a565b91505092915050565b6000806040838503121561058a57600080fd5b60006105988582860161053a565b925050602083013567ffffffffffffffff8111156105b557600080fd5b6105c1858286016104e6565b9150509250929050565b60006105d7838361066e565b905092915050565b6105e8816107d4565b82525050565b60006105f98261078f565b61060381856107b2565b93508360208202850161061585610782565b60005b8481101561064e5783830388526106308383516105cb565b925061063b826107a5565b9150602088019750600181019050610618565b508196508694505050505092915050565b610668816107e6565b82525050565b60006106798261079a565b61068381856107c3565b9350610693818560208601610835565b61069c81610868565b840191505092915050565b6106b081610812565b82525050565b60006020820190506106cb60008301846105df565b92915050565b600060208201905081810360008301526106eb81846105ee565b905092915050565b6000602082019050610708600083018461065f565b92915050565b600060208201905061072360008301846106a7565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561074c57600080fd5b8060405250919050565b600067ffffffffffffffff82111561076d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006107df826107f2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610853578082015181840152602081019050610838565b83811115610862576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820b2f659c3ab441fb6922b9ef8d2dcce595b26e156ed4861993424a12fd1672c116c6578706572696d656e74616cf50037";
			
			
//			String data = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001819055506108b3806100686000396000f3fe6080604052600436106100705760003560e01c80633bc5de301161004e5780633bc5de30146101175780638da5cb5b14610142578063a87d942c1461016d578063d0e30db01461019857610070565b806312065fe01461007257806312514bba1461009d57806320a9d963146100da575b005b34801561007e57600080fd5b506100876101a2565b604051610094919061070e565b60405180910390f35b3480156100a957600080fd5b506100c460048036036100bf919081019061054e565b6101c1565b6040516100d191906106f3565b60405180910390f35b3480156100e657600080fd5b5061010160048036036100fc9190810190610577565b610227565b60405161010e91906106f3565b60405180910390f35b34801561012357600080fd5b5061012c6102ce565b60405161013991906106d1565b60405180910390f35b34801561014e57600080fd5b506101576103b7565b60405161016491906106b6565b60405180910390f35b34801561017957600080fd5b506101826103dc565b60405161018f919061070e565b60405180910390f35b6101a06103e6565b005b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000816101cc6101a2565b10156101d757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561021d573d6000803e3d6000fd5b5060019050919050565b6000826102326101a2565b101561023d57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610283573d6000803e3d6000fd5b508160026001548154811061029457fe5b9060005260206000200190805190602001906102b1929190610441565b506001600081548092919060010191905055506001905092915050565b60606002805480602002602001604051908101604052809291908181526020016000905b828210156103ae578382906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b5050505050815260200190600101906102f2565b50505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600154905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043f57600080fd5b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061048257805160ff19168380011785556104b0565b828001600101855582156104b0579182015b828111156104af578251825591602001919060010190610494565b5b5090506104bd91906104c1565b5090565b6104e391905b808211156104df5760008160009055506001016104c7565b5090565b90565b600082601f8301126104f757600080fd5b813561050a61050582610756565b610729565b9150808252602083016020830185838301111561052657600080fd5b610531838284610826565b50505092915050565b6000610546823561081c565b905092915050565b60006020828403121561056057600080fd5b600061056e8482850161053a565b91505092915050565b6000806040838503121561058a57600080fd5b60006105988582860161053a565b925050602083013567ffffffffffffffff8111156105b557600080fd5b6105c1858286016104e6565b9150509250929050565b60006105d7838361066e565b905092915050565b6105e8816107d4565b82525050565b60006105f98261078f565b61060381856107b2565b93508360208202850161061585610782565b60005b8481101561064e5783830388526106308383516105cb565b925061063b826107a5565b9150602088019750600181019050610618565b508196508694505050505092915050565b610668816107e6565b82525050565b60006106798261079a565b61068381856107c3565b9350610693818560208601610835565b61069c81610868565b840191505092915050565b6106b081610812565b82525050565b60006020820190506106cb60008301846105df565b92915050565b600060208201905081810360008301526106eb81846105ee565b905092915050565b6000602082019050610708600083018461065f565b92915050565b600060208201905061072360008301846106a7565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561074c57600080fd5b8060405250919050565b600067ffffffffffffffff82111561076d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006107df826107f2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610853578082015181840152602081019050610838565b83811115610862576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820aaedb09c7596c608e79f7b130b68f7bccb5e0e16f4b3b8f76e3549d0e429c6796c6578706572696d656e74616cf50037";
			
//			String data = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001819055506108c4806100686000396000f3fe6080604052600436106100705760003560e01c80633bc5de301161004e5780633bc5de30146101175780638da5cb5b14610142578063a87d942c1461016d578063d0e30db01461019857610070565b806312065fe01461007257806312514bba1461009d57806320a9d963146100da575b005b34801561007e57600080fd5b506100876101a2565b604051610094919061071f565b60405180910390f35b3480156100a957600080fd5b506100c460048036036100bf919081019061055f565b6101c1565b6040516100d19190610704565b60405180910390f35b3480156100e657600080fd5b5061010160048036036100fc9190810190610588565b610227565b60405161010e9190610704565b60405180910390f35b34801561012357600080fd5b5061012c6102df565b60405161013991906106e2565b60405180910390f35b34801561014e57600080fd5b506101576103c8565b60405161016491906106c7565b60405180910390f35b34801561017957600080fd5b506101826103ed565b60405161018f919061071f565b60405180910390f35b6101a06103f7565b005b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000816101cc6101a2565b10156101d757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561021d573d6000803e3d6000fd5b5060019050919050565b6000826102326101a2565b101561023d57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610283573d6000803e3d6000fd5b5060028290806001815401808255809150509060018203906000526020600020016000909192909190915090805190602001906102c1929190610452565b50506001600081548092919060010191905055506001905092915050565b60606002805480602002602001604051908101604052809291908181526020016000905b828210156103bf578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103ab5780601f10610380576101008083540402835291602001916103ab565b820191906000526020600020905b81548152906001019060200180831161038e57829003601f168201915b505050505081526020019060010190610303565b50505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600154905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045057600080fd5b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061049357805160ff19168380011785556104c1565b828001600101855582156104c1579182015b828111156104c05782518255916020019190600101906104a5565b5b5090506104ce91906104d2565b5090565b6104f491905b808211156104f05760008160009055506001016104d8565b5090565b90565b600082601f83011261050857600080fd5b813561051b61051682610767565b61073a565b9150808252602083016020830185838301111561053757600080fd5b610542838284610837565b50505092915050565b6000610557823561082d565b905092915050565b60006020828403121561057157600080fd5b600061057f8482850161054b565b91505092915050565b6000806040838503121561059b57600080fd5b60006105a98582860161054b565b925050602083013567ffffffffffffffff8111156105c657600080fd5b6105d2858286016104f7565b9150509250929050565b60006105e8838361067f565b905092915050565b6105f9816107e5565b82525050565b600061060a826107a0565b61061481856107c3565b93508360208202850161062685610793565b60005b8481101561065f5783830388526106418383516105dc565b925061064c826107b6565b9150602088019750600181019050610629565b508196508694505050505092915050565b610679816107f7565b82525050565b600061068a826107ab565b61069481856107d4565b93506106a4818560208601610846565b6106ad81610879565b840191505092915050565b6106c181610823565b82525050565b60006020820190506106dc60008301846105f0565b92915050565b600060208201905081810360008301526106fc81846105ff565b905092915050565b60006020820190506107196000830184610670565b92915050565b600060208201905061073460008301846106b8565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561075d57600080fd5b8060405250919050565b600067ffffffffffffffff82111561077e57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006107f082610803565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610864578082015181840152602081019050610849565b83811115610873576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058203a53d7ffb36c7ead0f8217c8539acd6df64e31aed51eb7be65a67a915619b5866c6578706572696d656e74616cf50037";
			String data= "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060018190555061047d806100686000396000f3fe6080604052600436106100705760003560e01c80638da5cb5b1161004e5780638da5cb5b1461015c578063a87d942c146101b3578063b971691b146101de578063d0e30db01461023b57610070565b806312065fe01461007257806312514bba1461009d5780633bc5de30146100f0575b005b34801561007e57600080fd5b50610087610245565b6040518082815260200191505060405180910390f35b3480156100a957600080fd5b506100d6600480360360208110156100c057600080fd5b8101908080359060200190929190505050610264565b604051808215151515815260200191505060405180910390f35b3480156100fc57600080fd5b506101056102ca565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561014857808201518184015260208101905061012d565b505050509050019250505060405180910390f35b34801561016857600080fd5b50610171610322565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101bf57600080fd5b506101c8610347565b6040518082815260200191505060405180910390f35b3480156101ea57600080fd5b506102216004803603604081101561020157600080fd5b810190808035906020019092919080359060200190929190505050610351565b604051808215151515815260200191505060405180910390f35b6102436103f6565b005b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b60008161026f610245565b101561027a57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156102c0573d6000803e3d6000fd5b5060019050919050565b6060600280548060200260200160405190810160405280929190818152602001828054801561031857602002820191906000526020600020905b815481526020019060010190808311610304575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600154905090565b60008261035c610245565b101561036757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156103ad573d6000803e3d6000fd5b5060028290806001815401808255809150509060018203906000526020600020016000909192909190915055506001600081548092919060010191905055506001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044f57600080fd5b56fea165627a7a723058204babebd74b60facf6d39a6bced9e9c5ad53a98d533fabb90acaa2415f6e280fc0029";
//			String data= "";

			
			// caver & 계정 로드
			Caver caver = Caver.build(Caver.BAOBAB_URL);
			KlayCredentials sender = KlayCredentials.create(sendUser);
			
			// SmartContracdeployTransaction 생성
			SmartContractDeployTransaction smartContractDeployTransaction = SmartContractDeployTransaction.create(
					sender.getAddress(), // 컨트렉트를 배포하고자 하는 계정의 주소
					BigInteger.ZERO, 
					Numeric.hexStringToByteArray(data), 
					new DefaultGasProvider().getGasLimit(), 
					BigInteger.ZERO);
			
			// sender의 계정으로 TransactionManager 인스턴스 생성
			TransactionManager txManager
				= new TransactionManager
					.Builder(caver, sender)
					.setChaindId(ChainId.BAOBAB_TESTNET).build();
			
			String senderRawTransaction
				= txManager.sign(smartContractDeployTransaction, true).getValueAsString();
			
			KlayCredentials feePayer = KlayCredentials.create(feeUser);
			
			FeePayerManager feePayerManager
				= new FeePayerManager.Builder(caver,  feePayer)
					.setChainId(ChainId.BAOBAB_TESTNET).build();
			KlayTransactionReceipt.TransactionReceipt transactionReceipt 
				= feePayerManager.executeTransaction(senderRawTransaction);
			
			String txHash = transactionReceipt.getTransactionHash(); 
			String deployedContractAddress = transactionReceipt.getContractAddress();
			String errorMessage = transactionReceipt.getErrorMessage();
			
			System.out.println("txHash : "+txHash);
			System.out.println("deployedContractAddress : " + deployedContractAddress);
			System.out.println("errorMessage : " + errorMessage);
			
		}
		public void test_pee2() throws Exception{ // 수수료 스마트 컨트렉트로 클레이 전송 // 솔리디티 파일로 데이터 전송
			Caver caver = Caver.build(Caver.BAOBAB_URL);
			KlayCredentials sender = KlayCredentials.create("0xe6dde3422998e00bbd13002e1396388d9b0e4f6ab3de630ce8167ff2c99057f2");
			
			String str="1";
			//
//			byte[] byteArray=str.getBytes();
			
//			byte[] byteArray2 = "1212".getBytes();
//			String hexValue = javax.xml.bind.DatatypeConverter.printHexBinary(byteArray2);
			
			
			//Input byte array must be in range 0 < M <= 32 and length must match type 오류남.
			// 자바에선 16 비트 ? 로 바꿔서 길이가 63 ? 64 인데 , bytes32 에서는 길이를 32 까지 허용하니, 길이 오류가 남.
			
			
			Function function = new Function(
					Test6.FUNC_TRANSFERWITHDATA,  // FUNC_TRANSFER = "transfer"
			        Arrays.asList(
			        		new Uint256(BigInteger.ZERO),
			        		new Uint256(4)
			        		),  // inputParameters
			        Collections.emptyList()  // outputParameters          
			);
			String data = FunctionEncoder.encode(function);
			
		
//			
//			String strYes = new String(byteArray);
//			System.out.println(strYes);
			
//			JSONObject json = new JSONObject();
////			json.put("title", "first Vote");
////			json.put("vote", "1");
//			byte[] sendData = json.toString().getBytes("utf-8");
//			
//			JSONObject testV=new JSONObject(new String(sendData));
//			System.out.println(testV);
			
			TransactionManager txManager = new TransactionManager.Builder(caver, sender)
	                .setChaindId(ChainId.BAOBAB_TESTNET).build();
			
			SmartContractExecutionTransaction smartContractExecutionTransaction
				= SmartContractExecutionTransaction.create(
					sender.getAddress(),//만드는 User 의 address
//					"0x7b6c602b7e8dde60f16ec0684421d69868215f25",// 대납 콘트렉트 주소         
					"0x3970bec0c994b437d4bb2ccc277e965ce24f9ff6",
			        BigInteger.ZERO,
			        Numeric.hexStringToByteArray(data),       
//			        sendData, //전송할 데이터
			        new DefaultGasProvider().getGasLimit(Test6.FUNC_TRANSFER)
//			        BigInteger.valueOf(100_000)
			);
			System.out.println("smartContractExecutionTransaction:" +smartContractExecutionTransaction);
			String rawTransaction
			        = txManager.sign(smartContractExecutionTransaction, true).getValueAsString();
			
			KlayCredentials feePayer = KlayCredentials.create("0x26efd4a0c62543128ac05b4f3b29668d43c18a43531b5aecb85e387dd1dc0bd0");// 수수료 부담하는 사람의 private key
			FeePayerManager feePayerManager
			        = new FeePayerManager.Builder(caver, feePayer)
			        		.build();
//			                .setChainId(ChainId.BAOBAB_TESTNET).build();
			//Sync : FeePayer ExecuteTx
			KlayTransactionReceipt.TransactionReceipt transactionReceipt 
				= feePayerManager.executeTransaction(rawTransaction);
			String errorMessage = transactionReceipt.getErrorMessage();
			String txHash = transactionReceipt.getTransactionHash();
			
			System.out.println("txHash: "+txHash);
			System.out.println("errorMessage : "+ errorMessage);
		}

		public void load() throws Exception{// 배포된 스마트 컨트렉트의 uint List 출력, count 출력 
			Caver caver = Caver.build(Caver.BAOBAB_URL);
			
			KlayCredentials credentials = KlayCredentials.create("0x26efd4a0c62543128ac05b4f3b29668d43c18a43531b5aecb85e387dd1dc0bd0");
			
//			0xcc1b2b7db95514cced8b7dcb169470eeda34ca76    -  대납
			Test6 eeToken = Test6.load(
//					"0x7b6c602b7e8dde60f16ec0684421d69868215f25",// 콘트렉트 adress 
					"0x3970bec0c994b437d4bb2ccc277e965ce24f9ff6",
					caver, 
					credentials, 
					ChainId.BAOBAB_TESTNET,
					new DefaultGasProvider());
			
//			KlayTransactionReceipt.TransactionReceipt transactionReceipt = 
//					eeToken.transfer(BigInteger.ZERO).send();
//			String txHash = transactionReceipt.getTransactionHash();
//			System.out.println("After"+eeToken.getBalance());
//			
//			System.out.println("txHash : " + txHash);
			
//			Function function = new Function(
//					Test6.FUNC_GETDATA,  // FUNC_TRANSFER = "transfer"
//			        Arrays.asList(
//			        		
//			        		),  // inputParameters
//			        Collections.emptyList()  // outputParameters          
//			);
//			String data = FunctionEncoder.encode(function);
//			System.out.println(data);
//			System.out.println(eeToken.getData());
			
			
			RemoteCall<List> remoteCall = eeToken.getData();
//			remoteCall.send();
//			System.out.println(remoteCall);
			System.out.println("Vote List : "+remoteCall.send());
			
			System.out.println("Count : "+eeToken.getCount().send());
//			List result = remoteCall.send();
//			System.out.println(result);
		}
}
